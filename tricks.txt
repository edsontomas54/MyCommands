creat a new folder then press alt in the same time write 255 then hit enter =>this will create a folter without name
then go to options of the folter change the icon put the blank icon=> the folder will no have the name and will not be visible


===============>>>> change premissons

Change Ownership:
Open a terminal and navigate to your project directory. Run the following command to change the ownership of the project files to your user:
bash***
sudo chown -R your_username:your_username /path/to/your/project

Change Permissions:
If necessary, you might also need to adjust the file permissions. Run the following command to give your user read and write permissions:

bash**
chmod -R u+rw /path/to/your/project
This command grants read and write permissions to the owner (your user).

Now, your user should have the necessary permissions to modify files in your project without using sudo. If you encounter any issues related to permissions, you can address them by adjusting the ownership and permissions accordingly.

Keep in mind that modifying permissions and ownership should be done cautiously, especially on system-critical files. Only apply these changes to directories where it's necessary for your development work.


Ports===================>>>>

To see a list of all open ports on your Ubuntu system, you can use the netstat or ss command. Both commands are used to display network-related information. Here are some examples:

Using netstat:
sudo netstat -tulpn
This command will display a list of all listening and established connections, along with the associated processes and their process IDs. It provides information about both TCP and UDP ports.

Using ss (socket statistics):
sudo ss -tulpn
Similar to netstat, the ss command shows socket statistics, including TCP, UDP, and UNIX sockets, along with the associated processes.

Using lsof (list open files):

sudo lsof -i -P -n | grep LISTEN
This command lists all open files (including network sockets) and filters the output to show only listening ports.

Using nmap (Network Mapper):

sudo nmap -p- localhost
This command will perform a port scan on the localhost, showing all open ports. Note that nmap might not be installed by default, so you may need to install it using:


sudo apt-get install nmap
Choose the method that best suits your needs. The netstat and ss commands provide more detailed information about open ports and associated processes, while nmap can be used for a more comprehensive network scan.

User
if u stoped the php artisan serve, but this still running tcp       LISTEN     0           4096                 127.0.0.1:8000                 0.0.0.0:*         users:(("php8.1",pid=41094,fd=6))             


Kill the Process:
You can use the kill command to terminate the process associated with port 8000. In your case, the process ID is 41094. Run the following command:

sudo kill -9 41094
Replace 41094 with the actual process ID.

Check Again:
After killing the process, check if the port is still listed as listening:

sudo netstat -tulpn | grep 8000
If it's no longer listed, the issue is resolved.

Wait for Port Release:
Sometimes, it might take a moment for the operating system to release the port after the process is terminated. Try waiting for a minute and then check again.

Use a Different Port:
If the issue persists, consider using a different port for your Laravel application. Update your Laravel application's configuration to use a different port, and then restart the php artisan serve command.

php artisan serve --port=your_preferred_port
Replace your_preferred_port with the desired port number.

By following these steps, you should be able to resolve the issue of the port 8000 still being listed as listening even after stopping the php artisan serve command.

flutter installing=====>>>>>
nano ~/.bashrc 
export PATH="$PATH:/snap/bin/flutter/bin"
 source ~/.bashrc 




=======================Cresting a SFTP Script ======================
create a file .sh
#!/bin/bash

# Function to execute commands via SFTP
execute_sftp_commands() {
    # Login to the SFTP server
    echo "Logging in to SFTP server..."
    expect -c "
    spawn sftp dsedev@192.168.0.169
    expect \"Password:\"
    send \"devs#LimeAA1989\r\"
    expect \"sftp>\"
    send \"cd /var/backups/ambientes/fenix/fenix-isutc-p/\r\"
    interact
    "
}

# Execute the function
execute_sftp_commands

then Save this script in a file, for example, sftp_script.sh. Then make it executable by running:
chmod +x sftp_script.sh

Make sure you have expect installed on your Ubuntu system. You can install it using:

sudo apt-get install expect


======================================this:::::modified

#!/bin/bash

# Function to execute commands via SFTP
execute_sftp_commands() {
  # Parse the date parameter
  backup_date=$1

  # Login to the SFTP server
  echo "Logging in to SFTP server..."
  expect -c "
  spawn sftp dsedev@192.168.0.169
  expect \"Password:\"
  send \"devs#LimeAA1989\r\"
  expect \"sftp>\"
  send \"cd /var/backups/ambientes/fenix/fenix-isutc-p/\r\"
  expect \"sftp>\"
  send \"ls\r\"
  expect \"sftp>\"
  send \"get fenix_prod_backup_${backup_date}.tar.gz\r\"
  expect \"sftp>\"
  send \"exit\r\"
  interact
  "
}

# Check if date parameter is provided
if [ -z "$1" ]; then
  echo "Please provide the date parameter in the format YYYYMMDD."
  exit 1
fi

# Execute the function with the provided date parameter
execute_sftp_commands "$1"
save it.

to run u need to put the backup date that u wanna get ex:

./name_of_the_scrip 20240402
